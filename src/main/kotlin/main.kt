import java.time.Year
import kotlin.math.*

/*
Corey Mosley
c00275755
CMPS 359 Android Programming - Frank Ducrest
DUE: 9/3/2020 11:59pm
 */

fun main() {

    // a)
    /*
    Create a public Boolean returning function using fun that receives a question as a String and a
    correct answer to the question as a String. Using readLine, prompt the user to answer the question
    inside the function. If the user's input matches the correct answer, return true. Otherwise, return
    false.
     */
    fun questionAndAnswer(question: String, answer: String): Boolean {
        println(question)
        val theirAnswer = readLine()
        if (theirAnswer == answer)
            return true
        return false
    }

    println(
        questionAndAnswer(
            "What is best in life Conan?",
        "To crush your enemies, see them driven before you, and to hear the lamentation of their women."
        )
    )
    println()



    // b)
    /*
    Create a single expression function using fun that receives an integer in the range of 0 to 11, i. e.
    [0,11], and uses a when function to return the equivalent name for the year from the Chinese Zodiac.
    If the integer received isnâ€™t in the range [0,11], return the name for the last year of the 12 year cycle.
     */
    fun zodiac(year: Int): String = when(year) {
            0 -> "monkey"
            1 -> "rooster"
            2 -> "dog"
            3 -> "pig"
            4 -> "rat"
            5 -> "ox"
            6 -> "tiger"
            7 -> "rabbit"
            8 -> "dragon"
            9 -> "snake"
            10 -> "horse"
            11 -> "sheep"
            else -> "sheep"
        }
    println(zodiac(8))
    println()



    // c)
    /*
    Create a function using fun that receives three integers that serve as a starting point, an ending point
    and a step value, then returns the sum of the integers generated by a for loop. The smallest value that
    is not the step should always be used as the start of the range.
     */
    fun theLoop(startInt: Int, endInt: Int, stepInt: Int): Int {
        var sum = 0
        for(i in startInt..endInt step stepInt){
            sum += i
        }
        return sum
    }
    println(theLoop(0, 10, 2))
    println()



    // d)
    /*
    Assign an anonymous (lambda) function to a val variable that receives one integer. The anonymous
    function returns the number created by raising the number passed to the power of itself.
     */
    val tetration: (num: Int) -> Int = { localnum: Int ->
        Math.pow(localnum.toDouble(), localnum.toDouble()).toInt()
    }
    println(tetration(3))
    println()



    // e)***
    /*
    Assign an anonymous (lambda) function to a val variable that receives one positive integer. The
    anonymous function returns the number if it is prime. If it is not prime, zero is returned.
     */
    val isPrime: (Int) -> Int = { num ->
        var check = num
        for(i in 2..num / 2) {
            if( num % i == 0)
                check = 0
        }
            check

    }
    println(isPrime(7))
    println(isPrime(8))
    println()



    // f)***
    /*
    Create a function using fun that receives two positive integers and an anonymous function. The
    function received as a parameter receives one integer and returns an integer. The function created
    using fun uses the two integers received as a the high and low of a range of integers. The function
    received as a parameter is then called once for each integer in the range, i. e. each integer in the range
    is used as the actual parameter. The sum of all the returns from the function passed as a parameter is
    then returned from the function created using fun.

    Make two calls to the function created using fun. One call passing the function from (d) and one call
    passing the function from (e).
     */
    fun anonymousSum(low: Int, high: Int, op: (Int) -> Int): Int{
        var sum = 0
        for(i in low..high){
            sum += op(i)
        }
        return sum
    }
    println(anonymousSum(1,5,tetration))
    println(anonymousSum(1, 15, isPrime))
    println()

} // end main